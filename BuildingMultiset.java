package hearthlandsoptimizer;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;

/**
 * Holds a multiset of {@link Building} where each element can appear multiple
 * times, including as fractions of an element.
 * 
 * @param <Building> the {@code Building}.
 * @param <Float>    the amount of {@code Building}.
 * @author Am√©lia @SlayZeKyriarchy
 *
 */
public class BuildingMultiset extends HashMap<Building, Float>
        implements Multiset<Building> {
    
    public static final String QUOTE                    = "\"";
    public static final String EXCEL_ARGUMENT_SEPARATOR = ";";
    public static final String EXCEL_LINE_BREAK_FORMULA = "UNICAR(10)";
    
    /**
     * Generated by Eclipse.
     */
    private static final long serialVersionUID = 3901971977089369773L;
    
    private final Culture culture;
    
    /**
     * Constructs an empty {@code BuildingMultiset} with the default initial
     * capacity(16) and the default load factor (0.75).
     * 
     * {@link HashMap}
     * 
     * @param culture TODO
     * 
     */
    public BuildingMultiset(Culture culture) {
        super();
        this.culture = culture;
    }
    
    @Override
    public String toString() {
        ArrayList<Entry<Building, Float>> dependencies = new ArrayList<>(
                this.entrySet());
                
        Comparator<Entry<Building, Float>> totalStaffComp = (
                Entry<Building, Float> e1, Entry<Building, Float> e2) -> e1
                        .getKey().getTotalStaff(culture)
                        .compareTo(e2.getKey().getTotalStaff(culture));
        
        dependencies.sort(totalStaffComp.reversed());
        
        String result = "";
        
        result += "'=+CONCAT(";
        for (Entry<Building, Float> entry : dependencies) {
            Building building = entry.getKey();
            Float    count    = entry.getValue();
            boolean  isLast   = dependencies
                    .indexOf(entry) == dependencies.size() - 1;
            
            result += QUOTE;
            result += String.format("%-4.2f", count);
            result += " ";
            result += building.getName();
            result += QUOTE;
            if (!isLast) {
                result += EXCEL_ARGUMENT_SEPARATOR;
                result += EXCEL_LINE_BREAK_FORMULA;
                result += EXCEL_ARGUMENT_SEPARATOR;
            }
        }
        
        result += ")";
        
        return dependencies.isEmpty() ? "" : result;
    }
}
